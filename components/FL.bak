import { useState, useEffect } from "react";
import { usePublicClient } from "wagmi";
import { CONTRACT_ADDRESS, NFT_ABI, TOKENS, ERC20_ABI } from "@/lib/constants";
import { formatUnits, parseAbiItem } from "viem";

interface LeaderboardEntry {
  address: string;
  displayAddress: string;
  title: string;
  nftCount: number;
  myuBalance: string;
  daysHeld: number;
  rank: number;
  firstMintTimestamp?: number;
}

// Helper to format address
function formatAddress(address: string): string {
  return `${address.slice(0, 6)}...${address.slice(-4)}`;
}

// Calculate days between timestamp and now
function calculateDaysHeld(timestamp: number): number {
  const now = Date.now() / 1000;
  const secondsHeld = now - timestamp;
  return Math.floor(secondsHeld / 86400);
}

// Fungal titles based on holdings
const FUNGAL_TITLES = [
  { title: "Armillaria ostoyae", minNFTs: 500, minMYU: "1000000" },
  { title: "Laccaria amethystina", minNFTs: 5, minMYU: "100000000" },
  { title: "Clathrus archeri", minNFTs: 5, minMYU: "10000000" },
  { title: "Chorioactis geaster", minNFTs: 100, minMYU: "100000000" },
  { title: "Hydnellum peckii", minNFTs: 50, minMYU: "50000000" },
  { title: "Entoloma hochstetteri", minNFTs: 20, minMYU: "20000000" },
  { title: "Phallus indusiatus", minNFTs: 10, minMYU: "10000000" },
  { title: "Amanita muscaria", minNFTs: 5, minMYU: "5000000" },
  { title: "Agaricus bisporus", minNFTs: 2, minMYU: "1000000" },
];

function getFungalTitle(nftCount: number, myuBalance: string): string {
  const balance = parseFloat(myuBalance);
  for (const fungal of FUNGAL_TITLES) {
    if (nftCount >= fungal.minNFTs && balance >= parseFloat(fungal.minMYU)) {
      return fungal.title;
    }
  }
  return "Spore";
}

export function FungalLeaderboard() {
  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);
  const [loading, setLoading] = useState(true);
  const publicClient = usePublicClient();

  useEffect(() => {
    async function fetchHolders() {
      if (!publicClient) return;

      try {
        setLoading(true);

        // Get current block
        const currentBlock = await publicClient.getBlockNumber();

        // Calculate blocks in chunks of 500 (Alchemy limit)
        const BLOCK_CHUNK_SIZE = 500n;
        const startBlock = currentBlock - 1000n; // Look back 1k blocks

        const holderMap = new Map<string, { firstMintBlock: bigint; tokenIds: Set<string> }>();

        // Fetch logs in chunks
        for (let fromBlock = startBlock; fromBlock < currentBlock; fromBlock += BLOCK_CHUNK_SIZE) {
          const toBlock = fromBlock + BLOCK_CHUNK_SIZE - 1n > currentBlock ? currentBlock : fromBlock + BLOCK_CHUNK_SIZE - 1n;

          try {
            const logs = await publicClient.getLogs({
              address: CONTRACT_ADDRESS,
              event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)'),
              fromBlock,
              toBlock,
            });

            logs.forEach(log => {
              const from = log.args.from as string;
              const to = log.args.to as string;
              const tokenId = log.args.tokenId?.toString() || '';

              if (from === '0x0000000000000000000000000000000000000000' && to) {
                if (!holderMap.has(to)) {
                  holderMap.set(to, { firstMintBlock: log.blockNumber || 0n, tokenIds: new Set() });
                }
              }

              if (to && to !== '0x0000000000000000000000000000000000000000') {
                if (!holderMap.has(to)) {
                  holderMap.set(to, { firstMintBlock: log.blockNumber || 0n, tokenIds: new Set() });
                }
                holderMap.get(to)!.tokenIds.add(tokenId);
              }

              if (from && from !== '0x0000000000000000000000000000000000000000') {
                holderMap.get(from)?.tokenIds.delete(tokenId);
              }
            });
          } catch (error) {
            console.error(`Error fetching logs for blocks ${fromBlock}-${toBlock}:`, error);
          }
        }

        // Get active holders - Fixed: properly destructure and use variables
        const activeHolders = Array.from(holderMap.entries())
          .filter(([address, data]) => data.tokenIds.size > 0)
          .slice(0, 20);

        const holderData: LeaderboardEntry[] = [];

        for (const [holder, data] of activeHolders) {
          try {
            const [nftBalance, myuBalance, block] = await Promise.all([
              publicClient.readContract({
                address: CONTRACT_ADDRESS,
                abi: NFT_ABI,
                functionName: 'balanceOf',
                args: [holder],
              }),
              publicClient.readContract({
                address: TOKENS.MYU.address as `0x${string}`,
                abi: ERC20_ABI,
                functionName: 'balanceOf',
                args: [holder],
              }),
              publicClient.getBlock({ blockNumber: data.firstMintBlock }),
            ]);

            const nftCount = Number(nftBalance);
            const myuFormatted = formatUnits(myuBalance as bigint, TOKENS.MYU.decimals);
            const firstMintTimestamp = Number(block.timestamp);

            if (nftCount > 0) {
              holderData.push({
                address: holder,
                displayAddress: formatAddress(holder),
                title: getFungalTitle(nftCount, myuFormatted),
                nftCount,
                myuBalance: myuFormatted,
                daysHeld: calculateDaysHeld(firstMintTimestamp),
                rank: 0,
                firstMintTimestamp,
              });
            }
          } catch (error) {
            console.error(`Error fetching data for ${holder}:`, error);
          }
        }

        holderData.sort((a, b) => {
          if (b.nftCount !== a.nftCount) return b.nftCount - a.nftCount;
          return parseFloat(b.myuBalance) - parseFloat(a.myuBalance);
        });

        holderData.forEach((holder, index) => {
          holder.rank = index + 1;
        });

        setLeaderboard(holderData);
      } catch (error) {
        console.error('Error fetching leaderboard data:', error);

        // Fallback mock data
        setLeaderboard([
          {
            address: "0x1234567890123456789012345678901234567890",
            displayAddress: "0x1234...7890",
            title: "Armillaria ostoyae",
            nftCount: 523,
            myuBalance: "1,234,567",
            daysHeld: 180,
            rank: 1,
          },
          {
            address: "0x2345678901234567890123456789012345678901",
            displayAddress: "0x2345...8901",
            title: "Chorioactis geaster",
            nftCount: 156,
            myuBalance: "156,789,012",
            daysHeld: 120,
            rank: 2,
          },
        ]);
      } finally {
        setLoading(false);
      }
    }

    fetchHolders();
  }, [publicClient]);

  if (loading) {
    return (
      <div className="text-center py-8">
        <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-cyber"></div>
        <div className="mt-2 text-gray-700 dark:text-gray-300">Loading leaderboard...</div>
      </div>
    );
  }

  return (
    <div className="fungal-leaderboard">
      <h2 className="text-2xl font-bold mb-4 text-gray-900 dark:text-gray-100">Fungal Leaderboard</h2>
      <div className="overflow-x-auto">
        <table className="w-full table-auto">
          <thead>
            <tr className="border-b-2 border-gray-400 dark:border-gray-500 bg-gray-100 dark:bg-gray-800">
              <th className="text-left py-3 px-4 text-gray-900 dark:text-gray-100">Rank</th>
              <th className="text-left py-3 px-4 text-gray-900 dark:text-gray-100">Title</th>
              <th className="text-left py-3 px-4 text-gray-900 dark:text-gray-100">Holder</th>
              <th className="text-right py-3 px-4 text-gray-900 dark:text-gray-100"># NFTs</th>
              <th className="text-right py-3 px-4 text-gray-900 dark:text-gray-100"># $MYU</th>
              <th className="text-right py-3 px-4 text-gray-900 dark:text-gray-100">Days Held</th>
            </tr>
          </thead>
          <tbody>
            {leaderboard.map((entry) => (
              <tr
                key={entry.address}
                className="border-b border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-800/70"
              >
                <td className="py-3 px-4">
                  <span className="font-bold text-lg text-gray-900 dark:text-gray-100">#{entry.rank}</span>
                </td>
                <td className="py-3 px-4">
                  <span className="font-medium text-gray-900 dark:text-gray-100">{entry.title}</span>
                </td>
                <td className="py-3 px-4">
                  <a
                    href={`https://basescan.org/address/${entry.address}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-blue-700 dark:text-blue-400 hover:text-blue-900 dark:hover:text-blue-300 hover:underline font-mono"
                  >
                    {entry.displayAddress}
                  </a>
                </td>
                <td className="py-3 px-4 text-right font-medium text-gray-900 dark:text-gray-100">
                  {entry.nftCount.toLocaleString()}
                </td>
                <td className="py-3 px-4 text-right font-medium text-gray-900 dark:text-gray-100">
                  {parseFloat(entry.myuBalance).toLocaleString()}
                </td>
                <td className="py-3 px-4 text-right text-gray-900 dark:text-gray-100">
                  {entry.daysHeld}d
                  {entry.firstMintTimestamp && (
                    <div className="text-xs text-gray-600 dark:text-gray-400">
                      Since {new Date(entry.firstMintTimestamp * 1000).toLocaleDateString()}
                    </div>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}
